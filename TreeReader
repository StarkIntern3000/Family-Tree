import java.io.*;
import java.util.*;

public class TreeReader {
    private String filenameIn, filenameOut;
    private Person[] currentTree;
    private String[] linkArray;
    private String familyName, name;
    private int count,linkCount;
    private int age;
    private boolean sex;
    private char gender;
    private ArrayList<ArrayList<String>> nameListSmall, nameListBig;
    private int i = 0;
    private int x, y;
    
    /**
     * 
     * @param s is the filename of a .ft containing all the attributes of Person objects that will be created by the method.
     * @return an array of Person objects given the filename of a .ft file
     */
    public Person[] loadTree(String s){
        i = 0;
        nameListSmall = new ArrayList<>();
        nameListBig = new ArrayList<>();
        while(i<52){  
            ArrayList<String> inArray = new ArrayList<>();
            nameListSmall.add(inArray);
            nameListBig.add(inArray);
            i++;
        }
        filenameIn = s + ".ft";
        Scanner scan = null;
        FileReader reader = null;
        try {
            reader = new FileReader(filenameIn);
            System.out.println("File " + filenameIn + " found.");
        } catch(FileNotFoundException F) {
            System.out.println("Error: file does not exist");   
        }
        if (reader != null){
            scan = new Scanner(reader);
            x = 0;
            y = 0;
            while (scan.hasNextLine()) {
                String inputScanned = scan.nextLine();
                String [] lineRead = inputScanned.split(" ");
                
                if (lineRead[0].equals("family")) {
                    familyName = lineRead[1];
                    //System.out.println("FAMILY: " + familyName);
                }
                
                if (lineRead[0].equals("count"))  {
                    count = Integer.parseInt(lineRead[1]);
                    currentTree = new Person[count];
                    //System.out.println("COUNT: " + count);
                }
                
                if (lineRead[0].equals("name")) {
                    name = lineRead[1];
                    System.out.println("Name checker: " + nameChecker(name));
                    
                    //System.out.println("NAME: " + name);
                }
                
                if (lineRead[0].equals("age")) {
                    age = Integer.parseInt(lineRead[1]);
                    //System.out.println("AGE: " + age);
                }
                
                
                if (lineRead[0].equals("sex")) {
                    sex = Boolean.valueOf(lineRead[1]);
                    //System.out.println("SEX: " + sex);
                }
                
                
                if (lineRead[0].equals("gender")) {
                    gender = lineRead[1].charAt(0);
                    //System.out.println("GENDER: " + gender);
                    currentTree[x] = (new Person(name,age,sex,gender));
                    //System.out.println(currentTree[x].returnName());
                    x++;
                }
                
                if (lineRead[0].equals("links")) {
                    linkCount = Integer.parseInt(lineRead[1]);
                    linkArray = new String[linkCount];
                    System.out.println("LINKS: " + linkCount);
                }
                
                if (lineRead[0].equals("child")) {
                    linkArray[y] = lineRead[1] + " " + lineRead[2];
                    System.out.println("RELATIONSHIP: " + linkArray[y]);
                    y++;
                }
            }
            boolean cycle = false;
            if (currentTree.length > 0){
                //System.out.println(currentTree.length);
                for (int m=0;m<linkArray.length;m++) {
                    String[] names = linkArray[m].split(" ");
                    String n1 = names[0];
                    String n2 = names[1];
                    //System.out.println(n1);
                    //System.out.println(n2);

                    Person p1 = personSearch(currentTree,n1);
                    Person p2 = personSearch(currentTree,n2);

                    //System.out.println(p1);
                    //System.out.println(p2.returnName());
                    if (p2 == currentTree[0]){
                        cycle = true;
                        System.out.println("Error: cannot set root node of family tree as a child");
                    }
                    else{
                        cycle = p1.addChild(p2);
                    }
                }

                    //System.out.println(p2.returnParent().returnName());
                }
                boolean disconnected = orphanCheck();
                if (disconnected || cycle){
                    currentTree = null;
                }
        }
        
        return currentTree;
        

    }
    
    /**
     * 
     * @param p is an array of Person objects
     */
    public void setMain(Person[] p){
        currentTree = p;
        /*linkCount = 3;
        linkArray = new String[3];
        linkArray[0] = "child A B";
        linkArray[1] = "child B C";
        linkArray[2] = "child C D";*/
        
    }
    
    /**
     * 
     * @param s is the filename of the .ft file that this method will write
     */
    public void writeTree(String s){
        filenameOut = s +".ft";
        PrintWriter writer = null;
        try{
            writer = new PrintWriter(filenameOut);
        } catch(FileNotFoundException f){
            System.out.println("File "+ filenameOut + "not found.");
        }
        if (writer != null){
            System.out.println("Now writing");
            writer.println("family " + familyName);
            writer.println("count " + currentTree.length);
            for(int i = 0; i < currentTree.length; i++){
                writer.println("name " + currentTree[i].returnName());
                writer.println("age " + currentTree[i].returnAge());
                writer.println("sex " + currentTree[i].returnSex());
                writer.println("gender " + currentTree[i].returnGender());
            }
            writer.println("links " + linkCount);
            for (String x : linkArray){
                writer.println("child " + x);
            }

        }
        writer.flush();
        writer.close();
    }
    
    /**
     * 
     * @param name is a String the user wants to assign to a Person
     * @return a boolean that determines whether the name is already in use by someone in the tree
     */
      public boolean nameChecker(String name){
        char firstCharacter = name.charAt(0);
        
        int index = firstCharacter;
        boolean state = true;
        if(index < 97){
            int j = 0;
            index = index - 65;
            while(j<nameListSmall.get(index).size()){
                
                if(name.equals(nameListSmall.get(index).get(j))){
                    state = false;
                }
                j++;
            }
            nameListSmall.get(index).add(name);
        }else if(index >= 97){
            int k = 0;
            index = index - 97;
            while(k<nameListBig.get(index).size()){
                
                if(name.equals(nameListBig.get(index).get(k)) ){
                    state = false;
                }
                k++;
            }
            nameListBig.get(index).add(name);
        }
        return state;
    }
      
    /**
     * 
     * @param tree the array of Person objects being searched
     * @param s name of the Person being searched for
     * @return the Person being searched for given a name s
     */
    public Person personSearch(Person[] tree, String s) {
         Person found = null;
         for (int n=0;n<tree.length;n++) {
             Person p = tree[n];
             if (p.returnName().equals(s)) {
                found = p;
             }
         }
         return found;
     }
    
    public String ancestors(Person p){
        ArrayList<String> ancestorsList = new ArrayList<>();
        String ancestors = "";
        if (p.returnDepth(0) == 0){
            System.out.println("No ancestors");
        }
        else{
            while (p.returnDepth(0) >= 1){
                String parent = p.returnParent().returnName();
                ancestorsList.add(parent);
                p = p.returnParent();
                System.out.println("added " + parent);
            }
            
            Collections.sort(ancestorsList);
            boolean first = true;
            for(String x : ancestorsList){
                if (first) {ancestors = x; first = false;}
                else {ancestors += " " + x;}
            }         
        }        
        return ancestors;
    }
    /**
     *
     * @param p is a Person object whose list of descendants will be determined
     * @return a String containing the sorted list of the names of the descendants of Person p separated by a " "
     */
    public String descendants(Person p) {
        String descendants = "";
        ArrayList<String> descendantsList = new ArrayList();
        if (p.returnChildren() == 1) {
            descendantsList.add(p.returnName()) ;
            descendantsList.add(descendants(p.returnLeft()));
        }
        else if (p.returnChildren() == 2) {
            descendantsList.add(p.returnName());
            descendantsList.add(descendants(p.returnLeft()));
            descendantsList.add(descendants(p.returnRight()));
        }
        else {
            descendantsList.add(p.returnName());
        }
        Collections.sort(descendantsList);
        descendants = descendantsList.get(0);
        
        for (int i=1;i<descendantsList.size();i++) {
            descendants = descendants + " " + descendantsList.get(i);
        }
        return descendants;
    }
    
    /**
     * 
     * @return a boolean disc that determines whether or not a family tree is disconnected or contains Person objects without a parent
     * (aside from the root)
     */
    public boolean orphanCheck(){
        boolean disc = false;
        int orphans = 0;
        for (Person x : currentTree){
            if (x.returnParent() == null){
                orphans++;
            }
        }
        if (orphans > 1){
            disc = true;
            System.out.println("Error: family tree is disconnected; check for orphans");
        }
        return disc;
    }
}
