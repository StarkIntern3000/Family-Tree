import java.io.*;
import java.util.*;

public class TreeReader {
    private String filenameIn, filenameOut;
    private Person[] currentTree;
    private String[] linkArray;
    private String familyName, name;
    private int count,linkCount;
    private int age;
    private boolean sex;
    private char gender;
    private ArrayList<ArrayList<String>> nameListSmall, nameListBig;
    private int i = 0;
    private int x, y;
    
    public Person[] loadTree(String s){
        
        nameListSmall = new ArrayList<>();
        nameListBig = new ArrayList<>();
        while(i<52){  
            ArrayList<String> inArray = new ArrayList<>();
            nameListSmall.add(inArray);
            nameListBig.add(inArray);
            i++;
        }
        
        filenameIn = s;
        Scanner scan = null;
        FileReader reader = null;
        try {
            reader = new FileReader(filenameIn);
            System.out.println("File" + filenameIn + "found.");
            
        } catch(FileNotFoundException F) {
            System.out.println("File not found.");   
        }
        
        if (reader != null) {
            scan = new Scanner(reader);
            while (scan.hasNextLine()) {
                String inputScanned = scan.nextLine();
                String [] lineRead = inputScanned.split(" ");
                x = 0;
                y = 0;
                
                if (lineRead[0].equals("family")) {
                    familyName = lineRead[1];
                    System.out.println("FAMILY: " + familyName);
                }
                
                if (lineRead[0].equals("count"))  {
                    count = Integer.parseInt(lineRead[1]);
                    currentTree = new Person[count];
                    System.out.println("COUNT: " + count);
                }
                
                if (lineRead[0].equals("name")) {
                    name = lineRead[1];
                    System.out.println("NAME: " + name);
                }
                
                if (lineRead[0].equals("age")) {
                    age = Integer.parseInt(lineRead[1]);
                    System.out.println("AGE: " + age);
                }
                
                
                if (lineRead[0].equals("sex")) {
                    sex = Boolean.valueOf(lineRead[1]);
                    System.out.println("SEX: " + sex);
                }
                
                
                if (lineRead[0].equals("gender")) {
                    gender = lineRead[1].charAt(0);
                    System.out.println("GENDER: " + gender);
                    currentTree[x] = (new Person(name,age,sex,gender));
                    x++;
                    System.out.println(currentTree[0].returnName());
                }
                
                if (lineRead[0].equals("links")) {
                    linkCount = Integer.parseInt(lineRead[1]);
                    linkArray = new String[linkCount];
                    System.out.println("LINKS: " + linkCount);
                }
                
                if (lineRead[0].equals("child")) {
                    linkArray[y] = lineRead[1] + " " + lineRead[2];
                    System.out.println("RELATIONSHIP:" + linkArray[y]);
                    y++;
                }
                
            }
            
        }
        
        
        
        return currentTree;
        
        
    }
    
    public void writeTree(String s){
        filenameOut = s;
    }
    
     public boolean nameChecker(String name){
        char firstCharacter = name.charAt(0);
        int index = firstCharacter;
        if(index < 97){
            int j = 0;
            index = index - 65;
            while(j<=nameListSmall.get(index).size()){
                if(name == nameListSmall.get(index).get(j)){
                    return false;
                }
                j++;
            }
            nameListSmall.get(index).add(name);
        }else if(index >= 97){
            int k = 0;
            index = index - 97;
            while(k<=nameListBig.get(index).size()){
                if(name == nameListBig.get(index).get(k)){
                    return false;
                }
                k++;
            }
            nameListBig.get(index).add(name);
        }
        return true;
    }
    
    
}
