import java.io.*;
import java.util.*;

/**
 * 
 * The TreeReader class loads and writes an .ft file.
 * Using the file, it also creates a binary tree using an array of Person objects.
 * Other methods in TreeReader process data in the tree and also edit data in the tree. 
 */
public class TreeReader {
    private String filenameIn, filenameOut;
    private Person[] currentTree;
    private String[] linkArray;
    private String familyName, name;
    private int count,linkCount;
    private int age;
    private boolean sex;
    private char gender;
    private int i = 0;
    private int x, y;
    
    /**
     * 
     * @param s is the filename of a .ft containing all the attributes of Person objects that will be created by the method.
     * @return an array of Person objects given the filename of a .ft file.
     */
    public Person[] loadTree(String s){
        filenameIn = s + ".ft";
        Scanner scan = null;
        FileReader reader = null;
        try {
            reader = new FileReader(filenameIn);
        } catch(FileNotFoundException F) {
            System.out.println("Error: file does not exist");   
        }
        boolean built = true;
        if (reader != null){
            boolean n = false,a = false,se = false,g = false;
            scan = new Scanner(reader);
            x = 0;
            y = 0;
            int lines = 0;
            while (scan.hasNextLine()) {
                String inputScanned = scan.nextLine();
                String [] lineRead = inputScanned.split(" ");
                
                if (lineRead[0].equals("family")) {
                    familyName = lineRead[1];
                }
                
                if (lineRead[0].equals("count"))  {
                    count = Integer.parseInt(lineRead[1]);
                    currentTree = new Person[count];
                    lines = 0;
                }
                
                if (lineRead[0].equals("name")) {
                    name = lineRead[1];
                    String[] splitNewName = name.split("");
                            int i = 0;
                            boolean lettersChecker = true;
                            while(i<splitNewName.length){
                                if(Character.isLetter(name.charAt(i))){
                                    i++;
                                }else{
                                    lettersChecker=false;
                                    break;
                                }
                            }
                            if(lettersChecker == false){
                                System.out.println("Error: invalid input for name");
                                break;
                            }
                    boolean exists = nameChecker(name);
                    if (exists&& lettersChecker){
                        n = true;
                    }
                    else if (exists && !lettersChecker){
                        System.out.println("Error: person " + name+ " already exists.");
                    }
                }
                
                if (lineRead[0].equals("age")) {
                    try {  
                        age = Integer.parseInt(lineRead[1]);
                        a = true;
                    } catch(NumberFormatException e){
                        System.out.println("Error: invalid input for age");
                        a = false;
                    }
                }
                
                if (lineRead[0].equals("sex")) {
                    String sexS = lineRead[1];
                    sex = Boolean.valueOf(sexS);
                    if (sexS.equals("true") || sexS.equals("false")){
                        se = true;
                    }
                    else {
                        System.out.println("Error: invalid input for sex");
                        se = false;
                    }
                }
                
                if (lineRead[0].equals("gender")) {
                    String genderS = lineRead[1];
                    if(genderS.equals("M")|| genderS.equals("F") || genderS.equals("N")){
                        gender = genderS.charAt(0);
                        g = true;
                    }
                    else {
                        System.out.println("Error: invalid input for gender");
                        g = false;
                    }
                }
                
                if (lines == 4 && (n && a && se && g)){
                        currentTree[x] = (new Person(name,age,sex,gender));
                        x++;
                        n = false;
                        a = false;
                        se = false;
                        g = false;
                        built = true;
                        lines = 0;
                }
                
                else if (lines == 4 && !(n && a && se && g) && scan.hasNext()){
                    System.out.println("Error: person details are insufficient");
                    built = false;
                    
                }
                
                if (lineRead[0].equals("links")) {
                    n = true;
                    a = true;
                    se = true;
                    g = true;
                    lines = 5;
                    linkCount = Integer.parseInt(lineRead[1]);
                    linkArray = new String[linkCount];
                }

                if (lineRead[0].equals("child")) {
                    linkArray[y] = lineRead[1] + " " + lineRead[2];
                    y++;
                }
                lines++;
            }
            if (currentTree[count-1] == null){
                System.out.println("Error: declared count does not match number of person entries");
                built = false;
            }
            boolean cycle = false;
            
            if (currentTree.length > 0 && built){
                for (int m=0;m<linkArray.length;m++) {
                    String[] names = linkArray[m].split(" ");
                    String n1 = names[0];
                    String n2 = names[1];
                    Person p1 = personSearch(currentTree,n1);
                    Person p2 = personSearch(currentTree,n2);
                    
                    if (p1 == null || p2 == null){
                        System.out.println("Error: attempted to link nonexistent person(s)");
                        built = false;
                    }
                    else if (p2 == currentTree[0]){
                        cycle = true;
                        System.out.println("Error: cannot set root node of family tree as a child");
                        built = false;
                    }
                    else{
                        cycle = p1.addChild(p2);
                    }
                }

            }
            boolean disconnected = false;
            if (built && !cycle) {disconnected = orphanCheck();}
            if (disconnected || cycle || !built){
                currentTree = null;
            }
            else if (!disconnected || !cycle || built){
                System.out.println(filenameIn + " has been loaded");
            }
        }
        
        return currentTree;
    }
    
    /**
     * 
     * @param s is the filename of the .ft file that this method will write
     */
    public void writeTree(String s){
        filenameOut = s +".ft";
        PrintWriter writer = null;
        try{
            writer = new PrintWriter(filenameOut);
        } catch(FileNotFoundException f){
            System.out.println("File "+ filenameOut + "not found.");
        }
        if (writer != null){
            System.out.println(filenameOut + " saved.");
            writer.println("family " + familyName);
            writer.println("count " + currentTree.length);
            for(int i = 0; i < currentTree.length; i++){
                writer.println("name " + currentTree[i].returnName());
                writer.println("age " + currentTree[i].returnAge());
                writer.println("sex " + currentTree[i].returnSex());
                writer.println("gender " + currentTree[i].returnGender());
            }
            writer.println("links " + linkCount);
            for (String x : linkArray){
                writer.println("child " + x);
            }

        }
        writer.flush();
        writer.close();
    }
    
    /**
     * 
     * @param name is a String the user wants to assign to a Person
     * @return a boolean that determines whether the name is already in use by someone in the tree
     */
    public boolean nameChecker(String name){
       int j = 0;
       boolean state = true;
       while (j < count){
           if (currentTree[j] != null && currentTree[j].returnName().equals(name)){
               state = false;
           }
        j++;
       }
       return state;
    }
    
    /**
     * 
     * @param tree the array of Person objects being searched
     * @param s name of the Person being searched for
     * @return the Person being searched for given a name s
     */
    public Person personSearch(Person[] tree, String s) {
         Person found = null;
         for (int n=0;n<tree.length;n++) {
             Person p = tree[n];
             if (p.returnName().equals(s)) {
                found = p;
             }
         }
         return found;
     }
    
    /**
     * 
     * @param p is a Person  object whose list of ancestors will be determined
     * @return a String containing the sorted list of the names of the ancestors of Person p separated by a " "
     */
    public String ancestors(Person p){
        ArrayList<String> ancestorsList = new ArrayList<>();
        String ancestors = "";
        if (p.returnDepth(0) == 0){
            ancestors = "No ancestors";
        }
        else{
            while (p.returnDepth(0) >= 1){
                String parent = p.returnParent().returnName();
                ancestorsList.add(parent);
                p = p.returnParent();
            }
            
            Collections.sort(ancestorsList);
            ancestors = ancestorsList.get(0);
            for(int i = 1; i < ancestorsList.size(); i++){
                ancestors += " " + ancestorsList.get(i);
            }         
        }        
        return ancestors;
    }
    
    /**
     *
     * @param p is a Person object whose list of descendants will be determined
     * @return a String containing the sorted list of the names of the descendants of Person p separated by a " "
     */
    public String descendants(Person p) {
        String descendants = "";
        ArrayList<String> descendantsList = new ArrayList<>();
        if (p.returnChildren() == 1) {
            descendantsList.add(p.returnName()) ;
            descendantsList.add(descendants(p.returnLeft()));
        }
        else if (p.returnChildren() == 2) {
            descendantsList.add(p.returnName());
            descendantsList.add(descendants(p.returnLeft()));
            descendantsList.add(descendants(p.returnRight()));
        }
        else {
            descendantsList.add(p.returnName());
        }
        
        Collections.sort(descendantsList);
        descendants = descendantsList.get(0);
        
        for (int i=1;i<descendantsList.size();i++) {
            if (descendantsList.get(i) != p.returnName()) {
                descendants = descendants + " " + descendantsList.get(i);
            }
        }
        return descendants;
    }
    
    /**
     * 
     * @return a boolean disc that determines whether or not a family tree is disconnected or contains Person objects without a parent
     * (aside from the root)
     */
    public boolean orphanCheck(){
        boolean disc = false;
        int orphans = 0;
        for (Person x : currentTree){
            if (x.returnParent() == null){
                orphans++;
            }
        }
        if (orphans > 1){
            disc = true;
            System.out.println("Error: family tree is disconnected; check for orphans");
        }
        return disc;
    }
}
