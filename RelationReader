import java.lang.Math.*;
/**
 * 
 * The RelationReader class reads an array of Person objects which serves as a binary tree.
 * It contains methods that determine relationships within the tree of Person objects.
 */
public class RelationReader{
    private Person[] mainTree;
    private int dA = 0, dB = 0;
    private int nearest, furthest;
    private int degree, removal;
    private RelationVariable deg, rem, terminology, greatness;
    private Person lowestCA;
    
    /**
     * 
     * @param m is an array of Person objects that acts as a tree that the RelationReader reads and bases all relationships on
     */
    public RelationReader(Person[] m){
        mainTree = m;
        deg = new RelationVariable();
        rem = new RelationVariable();
        terminology = new RelationVariable();
        greatness = new RelationVariable();
    }
    /**
     * 
     * @param pa is the first Person object 
     * @param pb is the second Person object
     * @return the Person who is the lowest common ancestor of pa and pb
     */
    public Person LCA(Person pa, Person pb){
        Person A = pa, B = pb;
        int depthA = A.returnDepth(0), depthB = B.returnDepth(0);
        /*
            starts by getting the two compared people to the same depth - aligns them on the same generation by going to the lower depth
            also increases the distance of the deeper person accordingly
        */
        while (depthA != depthB){
            if (depthA > depthB){
                A = A.returnParent();
                dA++;
                depthA = A.returnDepth(0);
            }
            else if (depthA < depthB){
                B = B.returnParent();
                dB++;
                depthB = B.returnDepth(0);
            }
        }
        /*
            compares each person's respective ancestor of that generation until they find the same person
        */
        while (A != B){
            A = A.returnParent();
            B = B.returnParent();
            dA++;
            dB++;
        }
        
        lowestCA = A;
        return lowestCA;
    }
    
    /**
     * 
     * @param pa is the first Person object
     * @param pb is the second Person object
     * @return a String that indicates the relationship between pa and pb in the point of view of Person pa
     */
    public String Relationship(Person pa, Person pb) {

        //assigning nearest and furthest
        dA = 0;
        dB = 0;
        LCA(pa,pb);
        if (dA>dB) {
            furthest = dA;
            nearest = dB;
        }
        else {
            nearest = dA;
            furthest = dB;
        }
        
        //determining cousins
        if (nearest >= 2) {
            degree = nearest-1;
            removal = java.lang.Math.abs(dA-dB);
            if (removal == 0) {
                return deg.Ordinal(degree) + "cousin";
            }
            else {
                return deg.Ordinal(degree) + "cousin " + rem.Times(removal) + "removed";
            }
        }
        
        else if (nearest == 1) {
            //determining siblings
            if (furthest == 1) {
                if (pb.returnGender() == 'N') {
                    return "sibling";
                }
                else if (pb.returnGender() == 'F') {
                    return "sister";
                }
                else {
                    return "brother";
                }
            }
            //determining niblings and auncles
            else if (furthest == 2) {
                return terminology.Term("nibling",dA,dB,pb.returnGender());
            }
            else {
                return greatness.Great(nearest,furthest) + "grand" + terminology.Term("nibling",dA,dB,pb.returnGender());
            }
        }
        
        else {
            //determining parent or child
            if (furthest == 1) {
                return terminology.Term("child",dA,dB,pb.returnGender());
            }
            else {
                return greatness.Great(nearest,furthest) + "grand" + terminology.Term("child",dA,dB,pb.returnGender());
            }
        }
    }   
}
