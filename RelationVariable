/**
 * 
 * The RelationVariable class processes data using different methods and returns a String equivalent.
 * RelationVariable objects are used in implementing the Relation method in RelationReader.
 */
public class RelationVariable {
    
    public RelationVariable(){
    }
    
    /**
     * 
     * @param d is an integer
     * @return the a String which is the ordinal version of the integer
     */
    public String Ordinal(int d) {
        if (d == 1) {
            return "1st ";
        }
        else if (d == 2) {
            return "2nd ";
        }
        else if (d == 3) {
            return "3rd ";
        }
        else {
            return d + "th ";
        }
    }
    
    /**
     * 
     * @param r is an integer
     * @return a String "once", "twice", "thrice", "four times",...,"n times" given an integer 1,2,3,4,...,n respectfully
     */
    public String Times(int r) {
        if (r == 1) {
            return "once ";
        }
        else if (r == 2) {
            return "twice ";
        }
        else if (r == 3) {
            return "thrice ";
        }
        else {
            return Integer.toString(r) + " times ";
        }
    }
    
    /**
     * 
     * @param s is a String that can be either "child" or "nibling"
     * @param d1 is an integer that is the distance between the first Person and its lowest common ancestor with the second Person
     * @param d2 is an integer that is the distance between the second Person and its lowest common ancestor with the first Person
     * @param gender is the gender of the second Person
     * @return a String with is the term used to describe the 1st Person and 2nd Person's relationship given s,d1,d2,and gender
     */
    public String Term(String s,int d1,int d2,char gender) {
        if (s.equals("nibling")) {
            if (d1<d2) {
                if (gender == 'N') {
                    return "nibling";
                }
                else if (gender == 'F') {
                    return "niece";
                }
                else {
                    return "nephew";
                }
            }
            else {
                if (gender == 'N') {
                    return "pibling/auncle";   //gender neutral term for aunt/uncle
                }
                else if (gender == 'F') {
                    return "aunt";
                }
                else {
                    return "uncle";
                }
            }
        }
        else if (s.equals("child")){
            if (d1<d2) {
                if (gender == 'N') {
                    return "child";
                }
                else if (gender == 'F') {
                    return "daughter";
                }
                else {
                    return "son";
                }
            }
            else {
                if (gender == 'N') {
                    return "parent";    
                }
                else if (gender == 'F') {
                    return "mother";
                }
                else {
                    return "father";
                }
            }
        }
        else {
            return "Error";
        }
    }
    
    /**
     * 
     * @param n is an integer 
     * @param f is an integer 
     * @return a String of iterated "great" given n and f
     */
    public String Great(int n, int f) {
        String great = "";
        if (n==0) {
            while (f>2) {
                great = great + "great ";
                f = f-1;
            }
        }
        else if (n==1) {
            while (f>3) {
                great = great + "great ";
                f = f-1;
            }
        }
        return great;
    }
}
