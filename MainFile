import java.util.*;
/**
 * The MainFile class is where most of the user interface occurs. It creates a TreeReader & RealtionReader to load and process commands from  the command line, and prints out the data.
 * 
 */
public class MainFile {
    public static void main(String args[]){
        Person[] mainTree = null;
        TreeReader tReader = new TreeReader();
        RelationReader relationReader = null;
        
        String type;
        String name;
        boolean state;
        state = true;
        //While the program is still running
        while(state){
            boolean checker = false;
            Scanner scanner = new Scanner(System. in);
            System.out.print("> ");
            String input = scanner. nextLine();
            String[] inputArray = input.split(" ");
            
            try{
                type = inputArray[0];
            }catch(Exception e){
                continue;
            }
            
            
            if(mainTree == null){
                switch(type){
                    case "bye":
                        
                        state = false;
                        System.out.println("Goodbye!");
                        break;
                    case "load":
                        name = inputArray[1];
                        mainTree = tReader.loadTree(name);
                        relationReader = new RelationReader(mainTree);
                        break;
                    default: 
                        if (type.equals("count") || type.equals("age") || type.equals("sex") || type.equals("gender") || type.equals("ancestors") || type.equals("descendants") || type.equals("edit-name") || type.equals("edit-age") || type.equals("edit-sex") || type.equals("edit-gender") || type.equals("relationship") || type.equals("save")){
                            System.out.println("Error: a family tree must be loaded in the current session first");
                        }
                        else{
                            System.out.println("Error: unrecognized keyword " + type);
                        }
                }
            }else{
                if(inputArray.length == 1){
                    switch(type){
                        case "bye":
                            state = false;
                            System.out.println("Goodbye!");
                            break;
                        case "count":
                            System.out.println(mainTree.length);
                            break;
                        case "age":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                            
                        case "sex":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "gender":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "ancestors":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "descendants":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "load":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "save":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-name":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-age":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-sex":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-gender":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "relationship":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        default: 
                            System.out.println("Error: unrecognized keyword " + type);
                    }
                }else if(inputArray.length == 2){
                    switch(type){
                        case "age":
                            name = inputArray[1];

                            if(tReader.personSearch(mainTree, name) != null){
                                System.out.println(tReader.personSearch(mainTree, name).returnAge());
                                checker = true;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                            
                        case "sex":
                            name = inputArray[1];
                            if(tReader.personSearch(mainTree, name) != null){
                                System.out.println(tReader.personSearch(mainTree, name).returnSex());
                                checker = true;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "gender":
                            name = inputArray[1];
                            if(tReader.personSearch(mainTree, name) != null){
                                System.out.println(tReader.personSearch(mainTree, name).returnGender());
                                checker = true;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "ancestors":
                            name = inputArray[1];
                            if(tReader.personSearch(mainTree, name) != null){
                                System.out.println(tReader.ancestors(tReader.personSearch(mainTree, name)));
                                checker = true;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "descendants":
                            name = inputArray[1];
                            if(tReader.personSearch(mainTree, name) != null){
                                boolean hasChildren = false;
                                if (tReader.personSearch(mainTree,name).returnLeft() != null) {
                                    hasChildren = true;
                                }
                                if (hasChildren == false) {
                                    System.out.println("No descendants");
                                }
                                else {
                                    System.out.println(tReader.descendants(tReader.personSearch(mainTree,name)));
                                }
                                checker = true;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }

                            break;
                        case "load":
                            name = inputArray[1];
                            mainTree = tReader.loadTree(name);
                            break;
                        case "save":
                            name = inputArray[1];
                            tReader.writeTree(name);
                            break;
                        case "edit-name":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-age":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-sex":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "edit-gender":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "relationship":
                            System.out.println("Error: too few inputs from user for operation");
                            break;
                        case "bye":
                            System.out.println("Error: too many inputs from user for operation.");
                            break;
                        case "count":
                            System.out.println("Error: too many inputs from user for operation.");
                            break;
                        default: 
                            System.out.println("Error: unrecognized keyword " + type);
                    }
                }else if(inputArray.length == 3){
                    switch(type){
                        case "edit-name":
                            name = inputArray[1];
                            String newName = inputArray[2];
                            if(name.equals(newName)){
                                System.out.println("Error: inputs must be distinct");
                                break;
                            }
                            boolean unique = tReader.nameChecker(newName);
                            if(tReader.personSearch(mainTree, name) != null && unique){
                                checker = true;
                                tReader.personSearch(mainTree, name).AttriEditor("name",newName);
                                    break;
                            }
                            
                            if(!(tReader.personSearch(mainTree, name) != null)&&unique){
                                System.out.println("Error: no such person " + name);
                                break;
                            }else if(!(tReader.personSearch(mainTree, name) != null)&&!unique){
                                System.out.println("Error: no such person " + name);
                                System.out.println("Error: Person " + newName + " already exists.");
                                break;
                            }else if(tReader.personSearch(mainTree, name) != null && !(unique)){
                                System.out.println("Error: Person " + newName + " already exists.");
                                break;
                            }
                            
                            break;
                        case "edit-age":
                            name = inputArray[1];
                            String newAge = inputArray[2];
                            
                            if(tReader.personSearch(mainTree, name) != null){
                                checker = true;
                                tReader.personSearch(mainTree, name).AttriEditor("age",newAge);
                                    break;
                            }
                            
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "edit-sex":
                            name = inputArray[1];
                            String newSex = inputArray[2];
                            boolean nS;
                            if (newSex.equals("male")){
                                nS = true;
                            }
                            else if (newSex.equals("female")){
                                nS = false;
                            }
                            else{
                                System.out.println("Error: unrecognized keyword "+ type);
                                break;
                            }
                            
                            if(tReader.personSearch(mainTree, name) != null){
                                checker = true;
                                tReader.personSearch(mainTree, name).AttriEditor("sex",newSex);
                                    break;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "edit-gender":
                            name = inputArray[1];
                            String newGender = inputArray[2];
                            
                            if(tReader.personSearch(mainTree, name) != null){
                                checker = true;
                                tReader.personSearch(mainTree, name).AttriEditor("gender",newGender);
                                    break;
                            }
                            if(!checker){
                                System.out.println("Error: no such person " + name);
                            }
                            break;
                        case "relationship":
                            name = inputArray[1];
                            String nameCompared = inputArray[2];
                            if(name.equals(nameCompared)){
                                System.out.println("Error: inputs must be distinct");
                                break;
                            }
                            boolean nameAExist = false;
                            boolean nameBExist = false;
                            if(tReader.personSearch(mainTree, name)!=null){
                                nameAExist = true;
                            }
                            if(tReader.personSearch(mainTree, nameCompared) != null){
                                nameBExist = true;
                            }
                                
                            if(nameAExist && nameBExist){
                                System.out.println(relationReader.Relationship(tReader.personSearch(mainTree, name),tReader.personSearch(mainTree, nameCompared)));
                            }else if(!nameAExist && nameBExist){
                                System.out.println("Error: no such person " + name);
                            }else if(nameAExist && !nameBExist){
                                System.out.println("Error: no such person " + nameCompared);
                            }else if(!nameAExist && !nameBExist){
                                System.out.println("Error: no such person " + name);
                                System.out.println("Error: no such person " + nameCompared);
                            }
                            break;
                        case "age":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "sex":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "gender":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "ancestors":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "descendants":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "load":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "save":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "bye":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        case "count":
                            System.out.println("Error: too many inputs from user for operation");
                            break;
                        default: 
                            System.out.println("Error: unrecognized keyword " + type);
                    }
                }
                else if(inputArray.length > 3){
                    System.out.println("Error: too many inputs from user");
                }
            }      
        }
    }
